
version: '2.0'
session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true
intents:
- list_quiz
- file_handling:
    is_retrieval_intent: true
- flow_control:
    is_retrieval_intent: true
- class:
    is_retrieval_intent: true
- datatypes:
    is_retrieval_intent: true
- datatypes2:
    is_retrieval_intent: true
- function:
    is_retrieval_intent: true
- introduction
- introduction_page
- flow_control_topics
- function_topics
- datatype_topics
- list_topics
- tuple_topics
- set_topics
- dictionary_topics
- file_topics
- class_topics
- reference_books
- Previous_Year_Questions
- updates
- OTP
- know_performance
- give_email
- welcome
- greet
- goodbye
- deny
- mood_great
- mood_unhappy
- bot_challenge
- affirm
- subscribe
- emails_phone
- request_names
- ask_email
- repeat_mail
- tuple
- setup_failed
- python_not_recognized
- indentation
- python_facts
- image_file_read_program
- audio_file_read_program
entities:
- officer
slots:
  officer:
    type: bool
    influence_conversation: false
  mail:
    type: text
    influence_conversation: false
responses:
  utter_welcome:
  - text: Hey! I am Pyvidya powered by IIT Goa, How can I help you?
    button_type: vertical
    buttons:
      - title: Introduction
        payload: introduction_page
      - title: Flow Control
        payload: flow_control_topics
      - title: Function
        payload: function_topics
      - title: DataType
        payload: datatype_topics
      - title: File handling
        payload: file_topics
      - title: Class and Object
        payload: class_topics
      - title: Reference books
        payload: reference_books
      - title: Previous Year Questions Papers
        payload: Previous_Year_Questions

  utter_introduction_page:
  - text: I can help you in following topics
    button_type: vertical
    buttons:
      - title: Python programming language
        payload: python_intro
      - title: Python Installation
        payload: python_installation
      - title: Variables
        payload: python_variables
      - title: Strings
        payload: python_strings
      - title: Operators
        payload: python_operators

  utter_flow_control_topics:
  - text: I can help you in following Flow control topics
    button_type: vertical
    buttons:
      - title: If else statements
        payload: if_else
      - title: For loop
        payload: for_loop
      - title: While Loop
        payload: while_loop
      - title: Break & Continue Statement
        payload: break_continue
  utter_function_topics:
  - text: I can help you in following topics
    button_type: vertical
    buttons:
      - title: Introduction to Function
        payload: func_intro_python
      - title: How to define a function
        payload: func_dec_python
      - title: Function Arguments
        payload: func_args_python
      - title: Recursion in python
        payload: func_rec_python
  utter_datatype_topics:
  - text: I can help you in following datatype topics
    button_type: vertical
    buttons:
      - title: List
        payload: list_topics
      - title: Tuple
        payload: tuple_topics
      - title: Sets
        payload: set_topics
      - title: Dictionary
        payload: dictionary_topics

  utter_list_topics:
  - text: I can help you in following list  topics
    button_type: vertical
    buttons:
    - title: What is list
      payload: list
    - title: Access list items
      payload: list_access
    - title: Change list items
      payload: list_change
    - title: Add list items
      payload: list_add
    - title: Remove list items
      payload: list_remove

  utter_tuple_topics:
  - text: I can help you in following list  topics
    button_type: vertical
    buttons:
    - title: Access Tuples
      payload: access_tuples
    - title: Update Tuples
      payload: update_tuples
    - title: Unpack Tuples
      payload: unpack_tuples

  utter_set_topics:
  - text: I can help you in following Set topics
    button_type: vertical
    buttons:
    - title: Access set items
      payload: set_access
    - title: Add set items
      payload: set_add
    - title: Remove set items
      payload: set_remove

  utter_dictionary_topics:
  - text: I can help you in following dictionary topics
    button_type: vertical
    buttons:
    - title: Access dictionary items
      payload: dictionary_access
    - title: Change dictionary items
      payload: dictionary_change
    - title: Add dictionary items
      payload: dictionary_add
    - title: Remove dictionary items
      payload: dictionary_remove
  utter_file_topics:
  - text: I can help you in following File handling topics
    button_type: vertical
    buttons:
      - title: Introduction to File Handling
        payload: file_handling1
      - title: How to open File
        payload: file_open
      - title: File reading
        payload: file_read
      - title: File writing
        payload: file_write
      - title: File deleting
        payload: file_delete
      - title: Exception Handling
        payload: exception_handling

  utter_class_topics:
  - text: I can help you in following Class and Object topics
    button_type: vertical
    buttons:
      - title: Introduction to Class and object
        payload: create_class_object
      - title: Self Keyword
        payload: class_object_self
      - title: Init keyword
        payload: class_object_init
      - title: Delete an Object
        payload: class_object_delete
  utter_reference_books:
    - text: |-
        here are some references books:
        Book1
        Book2
  utter_Previous_Year_Questions:
  - text: here are some refernces
    button_type: vertical
    buttons:
      - title: Quizes
        payload: updates
      - title: Assignments
        payload: updates
      - title: Midsem
        payload: updates
      - title: Endsem
        payload: updates
  utter_updates:
  - text: "will be added  shortly"

  utter_cheer_up:
  - text: 'Here is something to cheer you up:'
    image: https://i.imgur.com/nGF1K8f.jpg
  utter_did_that_help:
  - text: Did that help you?
    buttons:
    - title: Yes
      payload: /affirm
    - title: No
      payload: /deny
  utter_happy:
  - text: Great, carry on!
  utter_goodbye:
  - text: Bye
  utter_iamabot:
  - text: I am a bot, powered by Rasa.
  utter_rephrase:
  - text: could you please rephrase?
  utter_ask_first_question:
  - text: What is your first name?
  utter_submit:
  - text: Ok. Thanks!
  utter_slots_values:
  - text: I will search your Question , {first_question}

  utter_introduction/python_intro:
  - text: |-
      Python is a popular programming language. It was created by Guido van Rossum, and released in 1991.
      .
      It is used for:
      web development (server-side),
      software development,
      mathematics,
      system scripting.
    button_type: vertical
    buttons:
    - title: Why Python
      payload: why_python
    - title: What Python can do
      payload: what_python_do


  utter_introduction/why_python:
  - text: |-
      Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
      Python has a simple syntax similar to the English language.
      Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
      Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
      Python can be treated in a procedural way, an object-oriented way or a functional way.

  utter_introduction/what_python_do:
  - text: |-
      Python can be used on a server to create web applications.
      Python can be used alongside software to create workflows.
      Python can connect to database systems. It can also read and modify files.
      Python can be used to handle big data and perform complex mathematics.
      Python can be used for rapid prototyping, or for production-ready software development.

  utter_introduction/python_installation:
  - text: |-
      here is details of python installation:
      https://docs.google.com/document/d/1U7vbc28Je1z9Z_V9d8JlpCk2AuVbEDFdd4P7xFBOzV4/edit#heading=h.irlfhtmzhtph


  utter_introduction/python_variables:
  - text: |-
      A variable is a named location used to store data in the memory. It is helpful to think of variables as a container that holds data that can be changed later in the program. For example,
      number = 10
      Here, we have created a variable named number. We have assigned the value 10 to the variable.
      more examples,
      x = str(3)    # x will be '3'
      y = int(3)    # y will be 3
      z = float(3)  # z will be 3.0
  utter_introduction/python_strings:
  - text: |-
      Strings in python are surrounded by either single quotation marks, or double quotation marks.
      'hello' is the same as "hello".
      You can display a string literal with the print() function:
      Examples:
      print("Hello")
      print('Hello')

      Read More on string from here: https://www.w3schools.com/python/python_strings.asp

  utter_introduction/python_operators:
  - text: |-
      Operators are used to perform operations on variables and values.
      Python divides the operators in the following groups:
      Arithmetic operators
      Assignment operators
      Comparison operators
      Logical operators
      Identity operators
      Membership operators
      Bitwise operators

      Read More on Operators here : https://www.w3schools.com/python/python_operators.asp

  utter_class/create_class_object:
  - text: Here is something i have
    image: https://bestpythontraininginchennai.files.wordpress.com/2018/09/classes-and-object-in-python.jpg
  utter_file_handling/file_handling1:
  - text: |-
      File handling is an important part of any web application.
       Python has several functions for creating, reading, updating,
       and deleting files.
  utter_file_handling/file_open:
  - text: |-
      The key function for working with files in Python is the 
       open() function.
       The open() function takes two parameters; filename, and mode
       There are four different methods (modes) for opening a file:
       r - Read - Default value. Opens a file for reading, error
       if the file does not exit
       a - Append - Opens a file for appending, creates the file
       if it does not exit
       w - Write - Opens a file for writing, creates the file
       if it does not exist
       x - Create - Creates the specified file, returns an error
       if the file exists
       w+ - Write and Read - Open the file for reading and writing

       In addition you can specify if the file should be handled
       as binary or text mode
       t - Text - Default value. Text mode
       b - Binary - Binary mode (e.g. images: f = open('C:\myimg.png', 'rb') # opening a binary file)

       Do you want to know more about file opening syntax and sample program?
    button_type: vertical
    buttons:
    - title: Yes
      payload: file_open_syntax
    - title: No
      payload: utter_goodbye
  utter_file_handling/file_open_syntax:
  - text: |-
      It is done using the open() function
      Syntax : File_object = open(r"File_Name", "Access_Mode")
      Why r used before File name?
      to prevent the characters in filename string to be treated as special character. For example, if there is \temp in the file address, then \t is treated as the tab character and error is raised of invalid address. The r makes the string raw
      Example
      #Create a new file if it does not exist:
      file1 = open("MyFile.txt", "w")

      # Open function to open the file "MyFile1.txt"
      # (same directory) in read mode and
      file1 = open("MyFile1.txt", "r")
      # store its reference in the variable file1

      # "MyFile2.txt" in D:\MyFolder in file2 variable
      file2 = open(r"D:\MyFolder\MyFile2.txt", "w+")
  utter_file_handling/file_read:
  - text: |-
      There are three ways to read data from a text file.

      1. read() : Returns the read bytes in form of a string. Reads n bytes, if no n specified, reads the entire file.
         Syntax : File_object.read([n])
      2. readline() : to read individual lines of a file. This method reads a file till the newline, including the newline character.
         Syntax : File_object.readline([n])
      3. readlines() : Reads all the lines and return them as each line a string element in a list.
         Syntax : File_object.readlines()

      Do you want to see file reading programs ?
    button_type: vertical
    buttons:
    - title: Yes
      payload: file_read_programs
    - title: No
      payload: utter_goodbye
  utter_file_handling/file_read_programs:
  - text: |-
      # Program to show various ways to read and
      # write data in a file.
      file1 = open("myfile.txt","w")
      L = ["This is Line No.1 \n","This is Line No.2 \n","This is Line No.3 \n"]

      # \n is placed to indicate EOL (End of Line)
      file1.write("Line No.4 \n")
      file1.writelines(L)
      file1.close() #to change file access modes

      file1 = open("myfile.txt","r+")

      print("Output of Read function is ")
      print(file1.read())

      # seek(n) takes the file handle to the nth
      # bite from the beginning.
      file1.seek(0)

      print("Output of Readline function is ")
      print(file1.readline())

      file1.seek(0)

      # To show difference between read and readline
      print("Output of Read(9) function is ")
      print(file1.read(9))

      file1.seek(0)

      print("Output of Readline(9) function is ")
      print(file1.readline(9))

      file1.seek(0)
      # readlines function
      print("Output of Readlines function is ")
      print(file1.readlines())

      #We can read a file line-by-line using a for loop. This is both efficient and fast.
      for line in file1:
          print(line, end = '')
      file1.close()

      Please copy this code and try in your terminal :)

      till now you seen about text file reading, Are curious to see how to read image,audio files?
    button_type: vertical
    buttons:
    - title: How to Read Image
      payload: file_handling/image_file_read_program
    - title: How to read audio
      payload: audio_file_read_program
    - title: How to read CSV
      payload: goodbye
  utter_image_file_read_program:
  - text: |-
      # Python program to read
      # image using PIL module

      # importing PIL
      from PIL import Image

      # Read image from current directory, img is variable
      img = Image.open('myimage.png')  #please specify path if image not in current directory

      # Output Images
      img.show()
  utter_audio_file_read_program:
  - text: |-
      # Python program to read
      # audio using Playsound module
      # install first using command : pip install playsound
      # import required module
      from playsound import playsound

      # for playing note.wav file, you can also try mp3 files
      playsound('/path/note.wav')    #specify your file path
      #You can also specify URL of audio file
      print('playing sound using playsound')
  utter_file_handling/file_write:
  - text: |-
      There are two ways to write in a file.
      1. write() : Inserts the string str1 in a single line in the text file.
         Syntax  : File_object.write(str1)
      2. writelines() : For a list of string elements, each string is inserted in the text file. Used to insert multiple strings at a single time
         Syntax   : File_object.writelines(L) for L = [str1, str2, str3]

      Do you want to see file writing programs ?
    button_type: vertical
    buttons:
    - title: Yes
      payload: file_write_program
    - title: No
      payload: goodbye
  utter_file_handling/file_write_program:
  - text: |-
      # Python program to demonstrate writing to file\n

      # Opening a file in Write Mode
      file1 = open('myfile.txt', 'w')
      L = ["This is Line No.1 \n", "This is Line No.2 \n", "This is Line No.3 \n"]
      s = "Hello\n"
      #
      # Writing a string to file
      file1.write(s)

      # Writing multiple strings at a time
      file1.writelines(L)

      # Closing file
      file1.close()

      # Checking if the data is
      # written to file or not, opening in read mode
      file1 = open('myfile.txt', 'r')
      print(file1.read())
      file1.close()

      Note :
      # open file in current directory
      file1 = open("myfile.txt",'r')
      # specifying full path
      file1 = open("C:/Python38/myfile.txt")

      I can show you how to append in file, can i ?
    button_type: vertical
    buttons:
    - title: Yes
      payload: utter_file_write_program_append
    - title: No
      payload: goodbye
  utter_file_write_program_append:
  - text: |-
      # Python program to illustrate Append
      # Let's First write few lines to file
      file1 = open("myfile.txt", "w")
      L = ["This is Line No.1 \n", "This is Line No.2 \n", "This is Line No.3 \n"]
      file1.writelines(L)
      file1.close()

      # Append-adds at last
      file1 = open("myfile.txt", "a")  # append mode
      file1.write("Line No.4 \n")
      file1.close()

      file1 = open("myfile.txt", "r")
      print("Output of Readlines after appending")
      print(file1.read())
      file1.close()

      Hey! You please try to replace "a" by "w", see what happens
  utter_file_handling/file_delete:
  - text: |-
      To delete a file, you must import the OS module,
       and run its os.remove() function:
       Example
       Remove the file demofile.txt:
       import os
       os.remove(demofile.txt)
  utter_file_handling/exception_handling:
  - text: |-
      When an error occurs, or exception as we call it, Python will normally stop and generate an error message.
      The try block lets you test a block of code for errors.
      The except block lets you handle the error.
      The finally block lets you execute code, regardless of the result of the try- and except blocks.
      Example
      Try to open and write to a file that is not writable:

      try:
        f = open("demofile.txt")
        f.write("Lorum Ipsum")
      except:
        print("Something went wrong when writing to the file")
      finally:
        f.close()
  utter_class/class_object_program:
  - text: |-
      A class is a user-defined blueprint or prototype from which objects are created.
      Class creates a user-defined data structure, which holds its own data members and member functions,\n which can be accessed and used by creating an instance of that class. A class is like a blueprint for an object
      \n
      let's understand more with example,
      Example
      # Python program to show
      # instantiating a class
      \n
      class Dog:

          # A simple class
          # attribute
          attr1 = "mammal"
          attr2 = "dog"

          # A sample method
          def fun(self):
              print("I'm a", self.attr1)
              print("I'm a", self.attr2)

      # Driver code
      # Object instantiation
      Rodger = Dog()

      # Accessing class attributes
      # and method through objects
      print(Rodger.attr1)
      Rodger.fun()

      Output>>>
      mammal
      I'm a mammal
      I'm a dog

      Do you want see more class object program?
    button_type: vertical
    buttons:
    - title: Yes
      payload: class_object_program_more
    - title: No
      payload: affirm
  utter_class/class_object_program_more:
  - text: |-
      #Create a class named Person,
      #use the __init__() function to assign values for name and age:

      class Person:
        #init method, runs as soon as obj is created
        def __init__(self, name, age):
            self.name = name
            self.age = age

        #object p1 created
        #init method will be invoked,
        p1 = Person("John", 36)
        print(p1.name)
        print(p1.age)

      what is self keyword?
    button_type: vertical
    buttons:
    - title: Yes
      payload: class_object_self
    - title: No
      payload: goodbye
  utter_class/class_object_init:
  - text: 'Note: The __init__() function is called automatically every time the class is being used to create a new object.The method is useful to do any initialization you want to do with your object.'
  utter_class/class_object_self:
  - text: |-
      The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.
      It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class:
  utter_class/class_object_delete:
  - text: |-
      You can delete objects by using the del keyword:
      Example
      Delete the p1 object:
      del p1
  utter_function/func_intro_python:
  - text: A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. A function can return data as a result. Its a generally good practice to implement the code in functional manner in order to reduce code size and reduce repeatation of simillar code again and again.
  utter_function/func_dec_python:
  - text: |-
      In Python a function is defined using the <def> keyword:
       ex-
       #write def keyword before function name
       def my_function():
           print('Hello from a function')

       #calling a function
       my_function()

       Information can be passed into functions as arguments.
       Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.
       ex-
       #fname is argument to the function
       def my_function(fname):
           print('my first name is' + fname)

       #calling a function
       my_function('Linus')

      Do you want to know more on function arguments? type "function Arguments"
  utter_function/func_args_python:
  - text: |-
      By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less.
      ex-
      def my_function(fname, lname):
          print(fname+ ' ' + lname)

      my_function('rahul', 'sharma')
      >>>rahul sharma
      If you try to call the function with 1 or 3 arguments, you will get an error

      If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition. This way the function will receive a tuple of arguments, and can access the items accordingly.
      ex-
      # * to recieve tuple of arguments
      def my_function(*name):
          print('His last name is ' + name['lname'])

      my_function(fname= 'rahul', lname= 'sharma')
      >>>His last name is sharma

      Do you want to know more about default parameters? Type "default parameter"
  utter_function/func_default_param_python:
  - text: |-
      We can give a default parameter to an argument of a function. If we call the function without argument, it uses the default value.
       def my_function(country = 'Norway'):
           print('I am from ' + country)

       #we passed 'Sweden' as parameter, It will replace default parameter 'Norway'
       my_function('Sweden')
       >>>I am from Sweden
       my_function()
       >>>I am from Norway
       my_function('India')
       >>>I am from India

      If you want to learn how to pass list as a parameter? Type "pass list as parameter"
  utter_function/func_list_param_python:
  - text: |-
      You can send any data types of argument to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function. if you send a List as an argument, it will still be a List when it reaches the function.
       ex-
       def my_function(food):
           for x in food:
              print(x)

       fruits = ['apple', 'banana', 'cherry']
       my_function(fruits)
       >>>apple banana cherry
  utter_function/func_pass_return_python:
  - text: |-
      To let a function return a value, use the return statement. Or we can simply return to callie function from called function using return keyword.
       ex-
       def my_function(x):
           return x * x

       print(my_function(3))
       >>>9
       print(my_function(9))
       >>>81
       function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.
       def my_function():
           pass
  utter_function/func_rec_python:
  - text: |-
      Recursion is a process of function calling itself. This has the benefit of meaning that you can loop through data to reach a result.
      The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.
       ex-
       #Program to print factorial using recursion.
       def factorial(n):
           #base condition
           if(n == 1):
              return 1
           #recursive condition
           else:
              return n * factorial(n-1)

      #calling factorial function
      factorial(3)
       >>>6

      Working of above code :
      factorial(3)          # 1st call with 3
      3 * factorial(2)      # 2nd call with 2
      3 * 2 * factorial(1)  # 3rd call with 1
      3 * 2 * 1             # return from 3rd call as number=1
      3 * 2                 # return from 2nd call
      6                     # return from 1st call

      Do you want to see one more recursion program?
    buttons:
    - title: Yes
      payload: func_rec_python_programs
    - title: No
      payload: affirm
  utter_function/func_rec_python_programs:
  - text: |2-

      # Function to calculate length
      def string_length(str) :
          # if we reach at the end of the string
          if str == '':
              return 0
          #slicing is used because we have already counted first character so 1 is added.
          else :
              return 1 + string_length(str[1:])

      # Driver Code
      str = "cat"
      print (string_length(str))

      Working :
      string_length("cat")    #first call
      1 + string_length("at")  #In else part, 2nd call
      1 + string_length("t")   #3rd call
      1 + string_length(" ")   #4th call
      return 0                 #5th call In if part, null string
      1 + 0                    #0 returned from 5th call
      1 + 1                    #1 returned from 4th call
      1 + 2                    #2 returned from 3rd call
      3                        #3 returned from 2nd call to first call
  utter_flow_control/if_else:
  - text: |-
      The if…elif…else statement is used in Python for decision making.
      Python if statement syntax :
      if condition:
          statement_1
      else:
          statement_2
      if condition is True then statement_1 is executed, otherwise statement_2 will get executed.
      Note :
      In Python, the body of the if statement is indicated by the indentation. The body starts with an indentation and the first unindented line marks the end.
      indatation is nothing but space(tab) left before each statement in if body

       Do you want to see if else programs?
    image: https://cdn.programiz.com/sites/tutorial2program/files/Python_if_else_statement.jpg
  utter_flow_control/if_else_programs:
  - text: |-
      # Program checks if the number is positive or negative
      # And displays an appropriate message
      num = 3
      # Try these two variations as well.
      # num = -5
      # num = 0
      if num >= 0:
          print("Positive or Zero")
      else:
          print("Negative number")

      #another program
      # check whether number is even or odd
      #take input from user
      n = int(input())
      # n%2 == 0 is the condition used to check even number
      if n%2 ==0:
          print("Even")
      else:
          print("Odd")
  utter_flow_control/for_loop:
  - text: |-
      A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).
      This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.
      Syntax of for loop :
      for val in sequence:
          loop body
      Here, val is the variable that takes the value of the item inside the sequence on each iteration.
      Loop continues until we reach the last item in the sequence. The body of for loop is separated from the rest of the code using indentation.

      The range() function :
      We can generate a sequence of numbers using range() function. range(10) will generate numbers from 0 to 9 (10 numbers).
      We can also define the start, stop and step size as range(start, stop,step_size). step_size defaults to 1 if not provided.

      Do you want to see for loop examples ?
    image: https://cdn.programiz.com/sites/tutorial2program/files/forLoop.jpg
  utter_flow_control/for_loop_programs:
  - text: |-
      # Program to find the sum of all numbers stored in a list
      # List of numbers
      numbers = [6, 5, 3, 8, 4, 2, 5, 4, 11]
      # variable to store the sum
      sum = 0
      # iterate over the list
      for val in numbers:
          sum = sum+val
      print("The sum is", sum)

      #another program
      # Program to iterate through a list using indexing
      genre = ['pop', 'rock', 'jazz']
      # iterate over the list using index
      for i in range(len(genre)):
          print("I like", genre[i])
  utter_flow_control/while_loop:
  - text: |-
      The while loop in Python is used to iterate over a block of code as long as the test expression (condition) is true.
      We generally use this loop when we don't know the number of times to iterate beforehand.
      Syntax of while loop :
      while condition:
          Body of while
      In the while loop, test expression is checked first. The body of the loop is entered only if the test_expression evaluates to True. After one iteration, the test expression is checked again. This process continues until the test_expression evaluates to False.
      The body starts with indentation and the first unindented line marks the end.

      do you want to see while loop programs?
    image: https://cdn.programiz.com/sites/tutorial2program/files/whileLoopFlowchart.jpg
  utter_flow_control/while_loop_programs:
  - text: |-
      # Program to add natural numbers up to
      # sum = 1+2+3+...+n

      # To take input from the user,
      # n = int(input("Enter n: "))
      n = 10
      # initialize sum and counter
      sum = 0
      i = 1
      while i <= n:
          sum = sum + i
          i = i+1    # update counter
      # print the sum
      print("The sum is", sum)
  utter_flow_control/break_continue:
  - text: |-
      In Python, break and continue statements can alter the flow of a normal loop.
      Loops iterate over a block of code until the test expression is false, but sometimes we wish to terminate the current iteration or even the whole loop without checking test expression.
      The break and continue statements are used in these cases.
      Python break statement
      The break statement terminates the loop containing it. Control of the program flows to the statement immediately after the body of the loop.

      # Use of break statement inside the loop
      for val in "string":
          if val == "i":
              break
          print(val)
      print("The end")

      Python continue statement
      The continue statement is used to skip the rest of the code inside a loop for the current iteration only. Loop does not terminate but continues on with the next iteration.

      # Program to show the use of continue statement inside loops
      for val in "string":
          if val == "i":
              continue
          print(val)
      print("The end")

      try this both code ans see the output :)
    image: https://cdn.programiz.com/sites/tutorial2program/files/how-continue-statment-works.jpg
  utter_datatypes/list:
  - text: |-
      A list is a data structure in Python that is a mutable, or changeable, ordered sequence of elements. Each element or value that is inside of a list is called an item. Just as strings are defined as characters between quotes, lists are defined by having values between square brackets [ ].

      Example:
      Create a List:
      thislist = ["apple", "banana", "cherry"]
      print(thislist)

      List items are ordered, changeable, and allow duplicate values.
      List items are indexed, the first item has index [0], the second item has index [1] etc.
    button_type: vertical
    buttons:
    - title: Access list items
      payload: list_access
    - title: Change list items
      payload: list_change
    - title: Add list items
      payload: list_add
    - title: Remove list items
      payload: list_remove
    - title: No
      payload: deny
  utter_datatypes/list_access:
  - text: |-
      List items are indexed and you can access them by referring to the index number:

      Example
      Print the second item of the list:
      -----------------------------------
      thislist = ["apple", "banana", "cherry"]
      print(thislist[1])
    buttons:
    - title: Negative Indexing
      payload: list_negative_index
    - title: Range of Indexes
      payload: list_index_range
  utter_datatypes/list_negative_index:
  - text: |-
      Negative indexing means start from the end
      -1 refers to the last item, -2 refers to the second last item etc.

      Example
      Print the last item of the list:
      --------------------------------------
      thislist = ["apple", "banana", "cherry"]
      print(thislist[-1])
  utter_datatypes/list_index_range:
  - text: |-
      You can specify a range of indexes by specifying where to start and where to end the range.
      When specifying a range, the return value will be a new list with the specified items.

      Example
      Return the third, fourth, and fifth item:
      ------------------------------------------
      thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
      print(thislist[2:5])

      Note: The search will start at index 2 (included) and end at index 5 (not included).
  utter_datatypes/list_change:
  - text: |-
      To change the value of a specific item, refer to the index number:

      Example
      Change the second item:
      --------------------------------------
      thislist = ["apple", "banana", "cherry"]
      thislist[1] = "blackcurrant"
      print(thislist)
    buttons:
    - title: Insert item
      payload: list_change_insert_item
  utter_datatypes/list_change_insert_item:
  - text: |-
      To insert a new list item, without replacing any of the existing values, we can use the insert() method.
      The insert() method inserts an item at the specified index:

      Example
      Insert "watermelon" as the third item:
      >
      thislist = ["apple", "banana", "cherry"]
      thislist.insert(2, "watermelon")
      print(thislist)

      Note: As a result of the example above, the list will now contain 4 items.
  utter_datatypes/list_add:
  - text: |-
      To add an item to the end of the list, use the append() method:

      Example
      Using the append() method to append an item:
      >
      thislist = ["apple", "banana", "cherry"]
      thislist.append("orange")
      print(thislist)
    button_type: vertical
    buttons:
    - title: Insert item
      payload: list_change_insert_item
    - title: Extend List
      payload: list_add_extend
    - title: Insert item
      payload: list_change_insert_item
  utter_datatypes/list_add_extend:
  - text: |-
      To append elements from another list to the current list, use the extend() method.

      Example
      Add the elements of tropical to thislist:
      >
      thislist = ["apple", "banana", "cherry"]
      tropical = ["mango", "pineapple", "papaya"]
      thislist.extend(tropical)
      print(thislist)
  utter_datatypes/list_remove:
  - text: |-
      The remove() method removes the specified item.

      Example
      Remove "banana":
      >
      thislist = ["apple", "banana", "cherry"]
      thislist.remove("banana")
      print(thislist)
    button_type: vertical
    buttons:
    - title: Remove Specified Index
      payload: list_remove_specified_index
    - title: Clear the List
      payload: list_remove_clear_list
  utter_datatypes/list_remove_specified_index:
  - text: |-
      The pop() method removes the specified index.

      Example
      Remove the second item:
      >
      thislist = ["apple", "banana", "cherry"]
      thislist.pop(1)
      print(thislist)
  utter_datatypes/list_remove_clear_list:
  - text: |-
      The clear() method empties the list.
      The list still remains, but it has no content.

      Example
      Clear the list content:
      >
      thislist = ["apple", "banana", "cherry"]
      thislist.clear()
      print(thislist)
  utter_datatypes/tuples:
  - text: |-
      Tuple
      Tuples are used to store multiple items in a single variable.
      Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage.
      A tuple is a collection which is ordered and unchangeable.
      Tuples are written with round brackets.

      Example
      Create a Tuple:
      >
      thistuple = ("apple", "banana", "cherry")
      print(thistuple)
    button_type: vertical
    buttons:
    - title: Access Tuples
      payload: access_tuples
    - title: Update Tuples
      payload: update_tuples
    - title: Unpack Tuples
      payload: unpack_tuples
  utter_datatypes/access_tuples:
  - text: |-
      You can access tuple items by referring to the index number, inside square brackets:

      Example
      Print the second item in the tuple:
      >
      thistuple = ("apple", "banana", "cherry")
      print(thistuple[1])
    button_type: vertical
    buttons:
    - title: Negative Indexing
      payload: access_tuples_negative_indexing
    - title: Range of Indexes
      payload: access_tuples_index_range
  utter_datatypes/access_tuples_negative_indexing:
  - text: |-
      Negative indexing means start from the end.
      -1 refers to the last item, -2 refers to the second last item etc.

      Example
      Print the last item of the tuple:
      >
      thistuple = ("apple", "banana", "cherry")
      print(thistuple[-1])
  utter_datatypes/access_tuples_index_range:
  - text: |-
      You can specify a range of indexes by specifying where to start and where to end the range.
      When specifying a range, the return value will be a new tuple with the specified items.

      Example
      Return the third, fourth, and fifth item:
      >
      thistuple = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
      print(thistuple[2:5])
  utter_datatypes/update_tuples:
  - text: |-
      Tuples are unchangeable, meaning that you cannot change, add, or remove items once the tuple is created.
      But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.

      Example
      Convert the tuple into a list to be able to change it:
      >
      x = ("apple", "banana", "cherry")
      y = list(x)
      y[1] = "kiwi"
      x = tuple(y)
      print(x)
    button_type: vertical
    buttons:
    - title: Add Items to tuple
      payload: update_tuples_add_items
    - title: Remove Items from tuple
      payload: update_tuples_remove_items
  utter_datatypes/update_tuples_add_items:
  - text: |-
      Since tuples are immutable, they do not have a build-in append() method, but there are other ways to add items to a tuple.

      1. Convert into a list: Just like the workaround for changing a tuple, you can convert it into a list, add your item(s), and convert it back into a tuple.

      Example
      Convert the tuple into a list, add "orange", and convert it back into a tuple:
      >
      thistuple = ("apple", "banana", "cherry")
      y = list(thistuple)
      y.append("orange")
      thistuple = tuple(y)
  utter_datatypes/update_tuples_remove_items:
  - text: |-
      Note: You cannot remove items in a tuple.

      Tuples are unchangeable, so you cannot remove items from it, but you can use the same workaround as we used for changing and adding tuple items:

      Example
      Convert the tuple into a list, remove "apple", and convert it back into a tuple:
      >
      thistuple = ("apple", "banana", "cherry")
      y = list(thistuple)
      y.remove("apple")
      thistuple = tuple(y)
  utter_datatypes/unpack_tuples:
  - text: |-
      When we create a tuple, we normally assign values to it. This is called "packing" a tuple:

      Example
      Packing a tuple:
      >
      fruits = ("apple", "banana", "cherry")

      But, in Python, we are also allowed to extract the values back into variables. This is called "unpacking":

      Example
      Unpacking a tuple:
      >
      fruits = ("apple", "banana", "cherry")
      (green, yellow, red) = fruits
      print(green)
      print(yellow)
      print(red)
      output >> apple
                banana
                cherry
    button_type: vertical
    buttons:
    - title: Negative Indexing
      payload: access_tuples_negative_indexing
    - title: Range of Indexes
      payload: access_tuples_index_range
  utter_datatypes2/set:
  - text: |-
      Set
      Sets are used to store multiple items in a single variable.
      Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.
      A set is a collection which is unordered, unchangeable*, and unindexed.

      * Note: Set items are unchangeable, but you can remove items and add new items.
    button_type: vertical
    buttons:
    - title: Access set items
      payload: set_access
    - title: Add set items
      payload: set_add
    - title: Remove set items
      payload: set_remove
  utter_datatypes2/set_access:
  - text: |-
      You cannot access items in a set by referring to an index or a key.
      But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.

      Example
      Loop through the set, and print the values:
      thisset = {"apple", "banana", "cherry"}
      for x in thisset:
        print(x)
  utter_datatypes2/set_add:
  - text: |-
      Once a set is created, you cannot change its items, but you can add new items.
      To add one item to a set use the add() method.

      Example
      Add an item to a set, using the add() method:
      thisset = {"apple", "banana", "cherry"}
      thisset.add("orange")
      print(thisset)
  utter_datatypes2/set_remove:
  - text: |-
      To remove an item in a set, use the remove(), or the discard() method.
      Example
      Remove "banana" by using the remove() method:
      thisset = {"apple", "banana", "cherry"}
      thisset.remove("banana")
      print(thisset)
  utter_datatypes2/dictionary:
  - text: |-
      Dictionaries are used to store data values in key:value pairs.
      A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
      As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.
      Dictionaries are written with curly brackets, and have keys and values:

      Example
      Create and print a dictionary:
      thisdict = {
        "brand": "Ford",
        "model": "Mustang",
        "year": 1964
      }
      print(thisdict)
    button_type: vertical
    buttons:
    - title: Access dictionary items
      payload: dictionary_access
    - title: Change dictionary items
      payload: dictionary_change
    - title: Add dictionary items
      payload: dictionary_add
    - title: Remove dictionary items
      payload: dictionary_remove
  utter_datatypes2/dictionary_access:
  - text: |-
      You can access the items of a dictionary by referring to its key name, inside square brackets:

      Example
      Get the value of the "model" key:
      thisdict = {
        "brand": "Ford",
        "model": "Mustang",
        "year": 1964
      }
      x = thisdict["model"]
  utter_datatypes2/dictionary_change:
  - text: |-
      You can change the value of a specific item by referring to its key name:

      Example
      Change the "year" to 2018:
      thisdict = {
        "brand": "Ford",
        "model": "Mustang",
        "year": 1964
      }
      thisdict["year"] = 2018
  utter_datatypes2/dictionary_add:
  - text: |-
      Adding an item to the dictionary is done by using a new index key and assigning a value to it:

      Example
      thisdict = {
        "brand": "Ford",
        "model": "Mustang",
        "year": 1964
      }
      thisdict["color"] = "red"
      print(thisdict)
  utter_datatypes2/dictionary_remove:
  - text: |-
      There are several methods to remove items from a dictionary:

      Example
      The pop() method removes the item with the specified key name:

      thisdict = {
        "brand": "Ford",
        "model": "Mustang",
        "year": 1964
      }
      thisdict.pop("model")
      print(thisdict)
  utter_ask_email:
  - text: please tell me your email
  utter_subscribe:
  - text: Please tell me email and phone separated by comma
  utter_list_quiz:
  - text: 'Test your knowledge here : https://forms.gle/bLeyMhn17iz84mck6'
  - text: 'Test your knowledge here : https://forms.gle/Gus3SextAei4K97P8'
  - text: 'Test your knowledge here : https://forms.gle/nHAEbgpE7XAzNFQZ8'
  - text: 'Test your knowledge here : https://forms.gle/HUeV5wwgjgLcNVas6'
  utter_introduction/indentation:
  - text: This error occurs when you forget to give an indentation in the starting line of a function or code block.
  utter_introduction/python_not_recognized:
  - text: |-
      The error is caused when Python’s executable file is not found in an environment variable as a result of the Python command in the Windows command prompt.

      To resolve this error, follow the steps below:

      1. Find a folder with the installed Python version as its name in X:\Program Files (where X is the drive where Windows is installed; e.g.,C:\Program Files\Python36). If such a folder does not exist, download and install the latest version of Python here.
      2.Open this folder and copy its path.
      3.Right-click This PC, then go to Properties => Advanced system settings => Environment variables.
      4.In the window that appears when a path variable exists, select it, ​and click Edit; otherwise, click New.
      5.In the next dialogue box, click on New and paste the previously copied path of the folder; then, click OK.
  utter_introduction/setup_failed:
  - text: |-
      Two solutions :
      1. Download and install KB2999226 from Microsoft website (https://www.microsoft.com/en-us/download/details.aspx?id=48234), restart your computer and lauch the Python 3.5.0 installer again.
      2. Install the previous stable version, Python 3.4.3, which you can found here (scroll down a bit) : https://www.python.org/downloads. It doesn't include the KB which is causing the problem.
  utter_python_facts:
  - text: |-
      Do You Know!
      python has built in database
      check out more here : https://towardsdatascience.com/do-you-know-python-has-a-built-in-database-d553989c87bd
  - text: |-
      Do You Know!
      There is another alteanative for csv file which save space and time which paraquet files
      check out more here : https://towardsdatascience.com/do-you-know-python-has-a-built-in-database-d553989c87bd
  - text: |-
      Do You Know!
      [] And list() Are Different In Python
      more : https://towardsdatascience.com/no-and-list-are-different-in-python-8940530168b0
  - text: |-
      Do You Know!
      Why is it called ‘Python’?
      While many people assume the name Python Programming comes from something related to the Python snake, it actually comes from the TV comedy series ‘Monty Python’s Flying Circus.’ This series broadcast on the BBC channel in the United Kingdom in the 1970s and was a favorite of Guido Van Rossum’s. Because it was short, cryptic, and included the name of his favorite TV comedy show, he chose the name ‘Python.’
  - text: |-
      Do You Know!
      There are C and Java Variants in Python
      Python offers variations for the C and Java programming languages, despite being a self-contained programming language. The C derivative, known as CPython, was built to give Python the benefits of C. One of these criteria is performance. The variation can be used as an interpreter as well as a compiler.

      Jython is Python’s Java implementation. It allows some of Java’s most important features, such as productivity, to run on a virtual machine.
  - text: |-
      Do You Know!
      Python was a hobby project
      In December 1989, Python’s creator Guido Van Rossum was looking for a hobby project to keep him occupied in the week around Christmas. He had been thinking of writing a new scripting language that’d be a descendant of ABC and also appeal to Unix/C hackers. He chose to call it Python.
  - text: 'Do You Know! \n Tim Peters, a major contributor to the Python community, wrote this poem to highlight the philosophies of Python. If you type in “import this” in your Python IDLE, you’ll find a poem:'
  - text: |-
      Do You Know!
      Python ships in various flavors:

      CPython- Written in C, most common implementation of Python
      Jython- Written in Java, compiles to bytecode
      IronPython- Implemented in C#, an extensibility layer to frameworks written in .NET
      Brython- Browser Python, runs in the browser
      RubyPython- Bridge between Python and Ruby interpreters
      PyPy- Implemented in Python
      MicroPython- Runs on a microcontroller
  - text: |-
      Do You Know!
      Antigravity!
      If you get to the IDLE and type in import antigravity, it opens up a webpage with a comic about the antigravity module.
actions:
- ACTION_DEFAULT_FALLBACK_Question
- action_know_performance
- action_receive_mail
- action_say_mail
- action_search_stack
- action_subscribe
- action_verify_otp
- utter_class
- utter_datatypes
- utter_datatypes2
- utter_did_that_help
- utter_file_handling
- utter_flow_control
- utter_function
- utter_greet
- utter_list_quiz
- utter_slots_values
- utter_submit
#forms:
#  name_form:
#    required_slots:
#      first_question:
#      - type: from_text
